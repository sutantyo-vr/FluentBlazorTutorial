@using FluentBlazorTutorial.Model
@using Microsoft.EntityFrameworkCore.Query.Internal
@using FluentBlazorTutorial.Data
@using System.Collections

@page "/datagrid"

@rendermode InteractiveServer

<h1>DataGrid</h1>

@if (_players == null)
{
  <p>
    <em>Loading...</em>
  </p>
}
else
{
  <FluentDataGrid Id="playergrid"
                  Items="@_players"
                  ResizableColumns="true"
                  TGridItem="Player">
    <PropertyColumn Title="Name"
                    Property="@(x => x!.Name)"
                    Sortable="true"
                    Align="Align.Start"/>
    <PropertyColumn Title="Country"
                    Property="@(x => x!.Country)"
                    Sortable="true"
                    Align="Align.Start"/>

    @* Columns generated by a loop *@
    @for (var i = 0; i < NumberOfRound; i++)
    {
      var round = i; // Copy the loop variable to avoid closure issues
      <PropertyColumn Title=@($"Round {round + 1}")
                      Property="@(x => (x!.Placement[round] == null) ? "N/A" : x!.Placement[round].ToString())"
                      Sortable="true"
                      Comparer="@(new CustomComparer())"
                      Align="Align.Start"/>
    }
    <TemplateColumn>
      <FluentButton id="@($"popover-{context.Name}")" Appearance="Appearance.Accent" 
                    @onclick="() => _popoverVisible[context.Name] = !_popoverVisible[context.Name]">
        Details
      </FluentButton>
      <FluentPopover Style="width: 300px;" VerticalThreshold="170" AnchorId="@($"popover-{context.Name}")"
                     Open="@_popoverVisible[context.Name]"
                     @*OpenChanged="@(() => OpenChangedFunc(context.Name))">*@
                     OpenChanged = "@(() => _popoverVisible[context.Name] = !_popoverVisible[context.Name])">
        @* @bind-Open="@(_popoverVisible[context.Name])"> *@
        <Header>Curve Definitions</Header>
        <Body>
        <FluentStack Orientation="Orientation.Vertical">
          <p>@context.Name</p>
        </FluentStack>
        </Body>
      </FluentPopover>
    </TemplateColumn>

  </FluentDataGrid>
}

@code {
  private IQueryable<Player>? _players;
  private int NumberOfRound => _players!.First().Placement.Count;

  private Dictionary<string, bool> _popoverVisible = new();

  private void TogglePopover(string name)
  {
    _popoverVisible[name] = !_popoverVisible[name];
  }
  
  private void OpenChangedFunc(string name){
    _popoverVisible[name] = !_popoverVisible[name];
  }

  protected override Task OnInitializedAsync()
  {
    _players = SampleData.Players.AsQueryable();
    foreach (var p in _players)
    {
      _popoverVisible[p.Name] = false;
    }

    return Task.CompletedTask;
  }


  public class CustomComparer : IComparer<string?>
  {
    public int Compare(string? x, string? y)
    {
      var xValue = int.TryParse(x, out var xVal) ? xVal : int.MaxValue;
      var yValue = int.TryParse(y, out var yVal) ? yVal : int.MaxValue;

      var val = Comparer<int>.Default.Compare(xValue, yValue);
      return Comparer<int>.Default.Compare(xValue, yValue);
    }
  }


}